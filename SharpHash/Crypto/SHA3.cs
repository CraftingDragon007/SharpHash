using SharpHash.Base;
using SharpHash.Interfaces;
using SharpHash.Utils;
using System;

namespace SharpHash.Crypto
{
    public enum HashMode
    {
        hmKeccak = 0x1,
        hmSHA3 = 0x6
    }; // end enum HashMode
    
    public abstract class SHA3 : BlockHash, ICryptoNotBuildIn, ITransformBlock
    {
        protected UInt64[] state = null;
        protected HashMode hash_mode;

        private readonly static string InvalidHashMode = "Only \"[{0}]\" HashModes are Supported";
               
        protected SHA3(Int32 a_hash_size)
            : base(a_hash_size, 200 - (a_hash_size * 2))
        {
            state = new UInt64[25];
        } // end constructor

        override public unsafe void Initialize()
        {
            fixed (UInt64* sPtr = state)
            {
                Utils.Utils.memset((IntPtr)sPtr, 0, 25 * sizeof(UInt64));
            }
            
            state[1] = UInt64.MaxValue;
            state[2] = UInt64.MaxValue;
            state[8] = UInt64.MaxValue;
            state[12] = UInt64.MaxValue;
            state[17] = UInt64.MaxValue;
            state[20] = UInt64.MaxValue;

            base.Initialize();
        } // end function Initialize

        override public string Name
        {
            get
            {
                switch (hash_mode)
                {
                    case HashMode.hmKeccak:
                        return String.Format("{0}_{1}",
                            "Keccak", hash_size * 8);
                    case HashMode.hmSHA3:
                        return Name;
                    default:
                        throw new ArgumentInvalidHashLibException(
                            String.Format(InvalidHashMode, "hmKeccak, hmSHA3"));
                }
            }
        } // end property Name

        protected override unsafe void Finish()
        {
            Int32 buffer_pos = buffer.Position;

            byte[] block = buffer.GetBytesZeroPadded();

            block[buffer_pos] = (byte)hash_mode;
            block[BlockSize - 1] = (byte)(block[BlockSize - 1] ^ 0x80);

            fixed (byte* bPtr = block)
            {
                TransformBlock((IntPtr)bPtr, buffer.Length, 0);
            }
            
            state[1] = ~state[1];
            state[2] = ~state[2];
            state[8] = ~state[8];
            state[12] = ~state[12];
            state[17] = ~state[17];
        } // end function Finish

        override protected unsafe byte[] GetResult()
        {
            byte[] result = new byte[HashSize];

            fixed (UInt64* sPtr = state)
            {
                fixed(byte* bPtr= result)
                {
                    Converters.le64_copy((IntPtr)sPtr, 0, (IntPtr)bPtr, 0, result.Length);
                }
            }
            
            return result;
        } // end function GetResult

        override protected unsafe void TransformBlock(IntPtr a_data,
                Int32 a_data_length, Int32 a_index)
        {
            UInt64 Aba, Abe, Abi, Abo, Abu, Aga, Age, Agi, Ago, Agu, Aka, Ake, Aki, Ako, Aku,
            Ama, Ame, Ami, Amo, Amu, Asa, Ase, Asi, Aso, Asu, Bba, Bbe, Bbi, Bbo, Bbu,
            Bga, Bge, Bgi, Bgo, Bgu, Bka, Bke, Bki, Bko, Bku, Bma, Bme, Bmi, Bmo, Bmu,
            Bsa, Bse, Bsi, Bso, Bsu, Ca, Ce, Ci, Co, Cu, Da, De, Di, Do, Du, Eba, Ebe,
            Ebi, Ebo, Ebu, Ega, Ege, Egi, Ego, Egu, Eka, Eke, Eki, Eko, Eku, Ema, Eme,
            Emi, Emo, Emu, Esa, Ese, Esi, Eso, Esu;

            UInt32 j;

            UInt64[] data = new UInt64[18];

            fixed (UInt64* dPtr = data)
            {
                Converters.le64_copy(a_data, a_index, (IntPtr)dPtr, 0, BlockSize);
            }

            j = 0;
            while (j < (BlockSize >> 3))
            {
                state[j] = state[j] ^ data[j];
                j++;
            } // end while

            Aba = state[0];
            Abe = state[1];
            Abi = state[2];
            Abo = state[3];
            Abu = state[4];
            Aga = state[5];
            Age = state[6];
            Agi = state[7];
            Ago = state[8];
            Agu = state[9];
            Aka = state[10];
            Ake = state[11];
            Aki = state[12];
            Ako = state[13];
            Aku = state[14];
            Ama = state[15];
            Ame = state[16];
            Ami = state[17];
            Amo = state[18];
            Amu = state[19];
            Asa = state[20];
            Ase = state[21];
            Asi = state[22];
            Aso = state[23];
            Asu = state[24];

            Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
            Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
            Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
            Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
            Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[0];
            Eba = Eba ^ 0x0000000000000001;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[1];
            Aba = Aba ^ 0x0000000000008082;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[2];
            Eba = Eba ^ 0x800000000000808A;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[3];
            Aba = Aba ^ 0x8000000080008000;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[4];
            Eba = Eba ^ 0x000000000000808B;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[5];
            Aba = Aba ^ 0x0000000080000001;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[6];
            Eba = Eba ^ 0x8000000080008081;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[7];
            Aba = Aba ^ 0x8000000000008009;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[8];
            Eba = Eba ^ 0x000000000000008A;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[9];
            Aba = Aba ^ 0x0000000000000088;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[10];
            Eba = Eba ^ 0x0000000080008009;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[11];
            Aba = Aba ^ 0x000000008000000A;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[12];
            Eba = Eba ^ 0x000000008000808B;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[13];
            Aba = Aba ^ 0x800000000000008B;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[14];
            Eba = Eba ^ 0x8000000000008089;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[15];
            Aba = Aba ^ 0x8000000000008003;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[16];
            Eba = Eba ^ 0x8000000000008002;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[17];
            Aba = Aba ^ 0x8000000000000080;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[18];
            Eba = Eba ^ 0x000000000000800A;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[19];
            Aba = Aba ^ 0x800000008000000A;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[20];
            Eba = Eba ^ 0x8000000080008081;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[21];
            Aba = Aba ^ 0x8000000000008080;
            Ca = Aba;
            Abe = Bbe ^ (~Bbi | Bbo);
            Ce = Abe;
            Abi = Bbi ^ (Bbo & Bbu);
            Ci = Abi;
            Abo = Bbo ^ (Bbu | Bba);
            Co = Abo;
            Abu = Bbu ^ (Bba & Bbe);
            Cu = Abu;
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Aga;
            Age = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Age;
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Agi;
            Ago = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ago;
            Agu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Agu;
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Aka;
            Ake = Bke ^ (Bki & Bko);
            Ce = Ce ^ Ake;
            Aki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Aki;
            Ako = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Ako;
            Aku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Aku;
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ama;
            Ame = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Ame;
            Ami = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Ami;
            Amo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Amo;
            Amu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Amu;
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Asa;
            Ase = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ase;
            Asi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Asi;
            Aso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Aso;
            Asu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Asu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Aba = Aba ^ Da;
            Bba = Aba;
            Age = Age ^ De;
            Bbe = Bits.RotateLeft64(Age, 44);
            Aki = Aki ^ Di;
            Bbi = Bits.RotateLeft64(Aki, 43);
            Amo = Amo ^ Do;
            Bbo = Bits.RotateLeft64(Amo, 21);
            Asu = Asu ^ Du;
            Bbu = Bits.RotateLeft64(Asu, 14);
            Eba = Bba ^ (Bbe | Bbi);
            // Eba := Eba ^ RC[22];
            Eba = Eba ^ 0x0000000080000001;
            Ca = Eba;
            Ebe = Bbe ^ (~Bbi | Bbo);
            Ce = Ebe;
            Ebi = Bbi ^ (Bbo & Bbu);
            Ci = Ebi;
            Ebo = Bbo ^ (Bbu | Bba);
            Co = Ebo;
            Ebu = Bbu ^ (Bba & Bbe);
            Cu = Ebu;
            Abo = Abo ^ Do;
            Bga = Bits.RotateLeft64(Abo, 28);
            Agu = Agu ^ Du;
            Bge = Bits.RotateLeft64(Agu, 20);
            Aka = Aka ^ Da;
            Bgi = Bits.RotateLeft64(Aka, 3);
            Ame = Ame ^ De;
            Bgo = Bits.RotateLeft64(Ame, 45);
            Asi = Asi ^ Di;
            Bgu = Bits.RotateLeft64(Asi, 61);
            Ega = Bga ^ (Bge | Bgi);
            Ca = Ca ^ Ega;
            Ege = Bge ^ (Bgi & Bgo);
            Ce = Ce ^ Ege;
            Egi = Bgi ^ (Bgo | ~Bgu);
            Ci = Ci ^ Egi;
            Ego = Bgo ^ (Bgu | Bga);
            Co = Co ^ Ego;
            Egu = Bgu ^ (Bga & Bge);
            Cu = Cu ^ Egu;
            Abe = Abe ^ De;
            Bka = Bits.RotateLeft64(Abe, 1);
            Agi = Agi ^ Di;
            Bke = Bits.RotateLeft64(Agi, 6);
            Ako = Ako ^ Do;
            Bki = Bits.RotateLeft64(Ako, 25);
            Amu = Amu ^ Du;
            Bko = Bits.RotateLeft64(Amu, 8);
            Asa = Asa ^ Da;
            Bku = Bits.RotateLeft64(Asa, 18);
            Eka = Bka ^ (Bke | Bki);
            Ca = Ca ^ Eka;
            Eke = Bke ^ (Bki & Bko);
            Ce = Ce ^ Eke;
            Eki = Bki ^ (~Bko & Bku);
            Ci = Ci ^ Eki;
            Eko = (~Bko) ^ (Bku | Bka);
            Co = Co ^ Eko;
            Eku = Bku ^ (Bka & Bke);
            Cu = Cu ^ Eku;
            Abu = Abu ^ Du;
            Bma = Bits.RotateLeft64(Abu, 27);
            Aga = Aga ^ Da;
            Bme = Bits.RotateLeft64(Aga, 36);
            Ake = Ake ^ De;
            Bmi = Bits.RotateLeft64(Ake, 10);
            Ami = Ami ^ Di;
            Bmo = Bits.RotateLeft64(Ami, 15);
            Aso = Aso ^ Do;
            Bmu = Bits.RotateLeft64(Aso, 56);
            Ema = Bma ^ (Bme & Bmi);
            Ca = Ca ^ Ema;
            Eme = Bme ^ (Bmi | Bmo);
            Ce = Ce ^ Eme;
            Emi = Bmi ^ (~Bmo | Bmu);
            Ci = Ci ^ Emi;
            Emo = ~Bmo ^ (Bmu & Bma);
            Co = Co ^ Emo;
            Emu = Bmu ^ (Bma | Bme);
            Cu = Cu ^ Emu;
            Abi = Abi ^ Di;
            Bsa = Bits.RotateLeft64(Abi, 62);
            Ago = Ago ^ Do;
            Bse = Bits.RotateLeft64(Ago, 55);
            Aku = Aku ^ Du;
            Bsi = Bits.RotateLeft64(Aku, 39);
            Ama = Ama ^ Da;
            Bso = Bits.RotateLeft64(Ama, 41);
            Ase = Ase ^ De;
            Bsu = Bits.RotateLeft64(Ase, 2);
            Esa = Bsa ^ (~Bse & Bsi);
            Ca = Ca ^ Esa;
            Ese = ~Bse ^ (Bsi | Bso);
            Ce = Ce ^ Ese;
            Esi = Bsi ^ (Bso & Bsu);
            Ci = Ci ^ Esi;
            Eso = Bso ^ (Bsu | Bsa);
            Co = Co ^ Eso;
            Esu = Bsu ^ (Bsa & Bse);
            Cu = Cu ^ Esu;
            Da = Cu ^ Bits.RotateLeft64(Ce, 1);
            De = Ca ^ Bits.RotateLeft64(Ci, 1);
            Di = Ce ^ Bits.RotateLeft64(Co, 1);
            Do = Ci ^ Bits.RotateLeft64(Cu, 1);
            Du = Co ^ Bits.RotateLeft64(Ca, 1);
            Eba = Eba ^ Da;
            Bba = Eba;
            Ege = Ege ^ De;
            Bbe = Bits.RotateLeft64(Ege, 44);
            Eki = Eki ^ Di;
            Bbi = Bits.RotateLeft64(Eki, 43);
            Emo = Emo ^ Do;
            Bbo = Bits.RotateLeft64(Emo, 21);
            Esu = Esu ^ Du;
            Bbu = Bits.RotateLeft64(Esu, 14);
            Aba = Bba ^ (Bbe | Bbi);
            // Aba := Aba ^ RC[23];
            Aba = Aba ^ 0x8000000080008008;
            Abe = Bbe ^ (~Bbi | Bbo);
            Abi = Bbi ^ (Bbo & Bbu);
            Abo = Bbo ^ (Bbu | Bba);
            Abu = Bbu ^ (Bba & Bbe);
            Ebo = Ebo ^ Do;
            Bga = Bits.RotateLeft64(Ebo, 28);
            Egu = Egu ^ Du;
            Bge = Bits.RotateLeft64(Egu, 20);
            Eka = Eka ^ Da;
            Bgi = Bits.RotateLeft64(Eka, 3);
            Eme = Eme ^ De;
            Bgo = Bits.RotateLeft64(Eme, 45);
            Esi = Esi ^ Di;
            Bgu = Bits.RotateLeft64(Esi, 61);
            Aga = Bga ^ (Bge | Bgi);
            Age = Bge ^ (Bgi & Bgo);
            Agi = Bgi ^ (Bgo | ~Bgu);
            Ago = Bgo ^ (Bgu | Bga);
            Agu = Bgu ^ (Bga & Bge);
            Ebe = Ebe ^ De;
            Bka = Bits.RotateLeft64(Ebe, 1);
            Egi = Egi ^ Di;
            Bke = Bits.RotateLeft64(Egi, 6);
            Eko = Eko ^ Do;
            Bki = Bits.RotateLeft64(Eko, 25);
            Emu = Emu ^ Du;
            Bko = Bits.RotateLeft64(Emu, 8);
            Esa = Esa ^ Da;
            Bku = Bits.RotateLeft64(Esa, 18);
            Aka = Bka ^ (Bke | Bki);
            Ake = Bke ^ (Bki & Bko);
            Aki = Bki ^ (~Bko & Bku);
            Ako = ~Bko ^ (Bku | Bka);
            Aku = Bku ^ (Bka & Bke);
            Ebu = Ebu ^ Du;
            Bma = Bits.RotateLeft64(Ebu, 27);
            Ega = Ega ^ Da;
            Bme = Bits.RotateLeft64(Ega, 36);
            Eke = Eke ^ De;
            Bmi = Bits.RotateLeft64(Eke, 10);
            Emi = Emi ^ Di;
            Bmo = Bits.RotateLeft64(Emi, 15);
            Eso = Eso ^ Do;
            Bmu = Bits.RotateLeft64(Eso, 56);
            Ama = Bma ^ (Bme & Bmi);
            Ame = Bme ^ (Bmi | Bmo);
            Ami = Bmi ^ (~Bmo | Bmu);
            Amo = ~Bmo ^ (Bmu & Bma);
            Amu = Bmu ^ (Bma | Bme);
            Ebi = Ebi ^ Di;
            Bsa = Bits.RotateLeft64(Ebi, 62);
            Ego = Ego ^ Do;
            Bse = Bits.RotateLeft64(Ego, 55);
            Eku = Eku ^ Du;
            Bsi = Bits.RotateLeft64(Eku, 39);
            Ema = Ema ^ Da;
            Bso = Bits.RotateLeft64(Ema, 41);
            Ese = Ese ^ De;
            Bsu = Bits.RotateLeft64(Ese, 2);
            Asa = Bsa ^ (~Bse & Bsi);
            Ase = ~Bse ^ (Bsi | Bso);
            Asi = Bsi ^ (Bso & Bsu);
            Aso = Bso ^ (Bsu | Bsa);
            Asu = Bsu ^ (Bsa & Bse);

            state[0] = Aba;
            state[1] = Abe;
            state[2] = Abi;
            state[3] = Abo;
            state[4] = Abu;
            state[5] = Aga;
            state[6] = Age;
            state[7] = Agi;
            state[8] = Ago;
            state[9] = Agu;
            state[10] = Aka;
            state[11] = Ake;
            state[12] = Aki;
            state[13] = Ako;
            state[14] = Aku;
            state[15] = Ama;
            state[16] = Ame;
            state[17] = Ami;
            state[18] = Amo;
            state[19] = Amu;
            state[20] = Asa;
            state[21] = Ase;
            state[22] = Asi;
            state[23] = Aso;
            state[24] = Asu;

            fixed (UInt64* dPtr = data)
            {
                Utils.Utils.memset((IntPtr)dPtr, 0, 18 * sizeof(UInt64));
            }

        } // end function TransformBlock

    } // end class SHA3


    public class SHA3_224 : SHA3
    {
        public SHA3_224() :
            base((Int32)HashSizeEnum.HashSize224)
        {
            hash_mode = HashMode.hmSHA3;
        } // end constructor

        override public IHash Clone()
        {
            SHA3_224 HashInstance = new SHA3_224();
            HashInstance.buffer = buffer.Clone();
            HashInstance.processed_bytes = processed_bytes;

            HashInstance.state = new UInt64[state.Length];
            for (Int32 i = 0; i < state.Length; i++)
                HashInstance.state[i] = state[i];

            HashInstance.BufferSize = BufferSize;

            return HashInstance;
        } // end function Clone
        
    } // end class SHA3_224

    public class SHA3_256 : SHA3
    {
        public SHA3_256() :
            base((Int32)HashSizeEnum.HashSize256)
        {
            hash_mode = HashMode.hmSHA3;
        } // end constructor

        override public IHash Clone()
        {
            SHA3_256 HashInstance = new SHA3_256();
            HashInstance.buffer = buffer.Clone();
            HashInstance.processed_bytes = processed_bytes;

            HashInstance.state = new UInt64[state.Length];
            for (Int32 i = 0; i < state.Length; i++)
                HashInstance.state[i] = state[i];

            HashInstance.BufferSize = BufferSize;

            return HashInstance;
        } // end function Clone

    } // end class SHA3_256

    public class SHA3_384 : SHA3
    {
        public SHA3_384() :
            base((Int32)HashSizeEnum.HashSize384)
        {
            hash_mode = HashMode.hmSHA3;
        } // end constructor

        override public IHash Clone()
        {
            SHA3_384 HashInstance = new SHA3_384();
            HashInstance.buffer = buffer.Clone();
            HashInstance.processed_bytes = processed_bytes;

            HashInstance.state = new UInt64[state.Length];
            for (Int32 i = 0; i < state.Length; i++)
                HashInstance.state[i] = state[i];

            HashInstance.BufferSize = BufferSize;

            return HashInstance;
        } // end function Clone

    } // end class SHA3_384

    public class SHA3_512 : SHA3
    {
        public SHA3_512() :
            base((Int32)HashSizeEnum.HashSize512)
        {
            hash_mode = HashMode.hmSHA3;
        } // end constructor

        override public IHash Clone()
        {
            SHA3_512 HashInstance = new SHA3_512();
            HashInstance.buffer = buffer.Clone();
            HashInstance.processed_bytes = processed_bytes;

            HashInstance.state = new UInt64[state.Length];
            for (Int32 i = 0; i < state.Length; i++)
                HashInstance.state[i] = state[i];

            HashInstance.BufferSize = BufferSize;

            return HashInstance;
        } // end function Clone

    } // end class SHA3_512


    public class Keccak_224 : SHA3
    {
        public Keccak_224() :
            base((Int32)HashSizeEnum.HashSize224)
        {
            hash_mode = HashMode.hmKeccak;
        } // end constructor

        override public IHash Clone()
        {
            Keccak_224 HashInstance = new Keccak_224();
            HashInstance.buffer = buffer.Clone();
            HashInstance.processed_bytes = processed_bytes;

            HashInstance.state = new UInt64[state.Length];
            for (Int32 i = 0; i < state.Length; i++)
                HashInstance.state[i] = state[i];

            HashInstance.BufferSize = BufferSize;

            return HashInstance;
        } // end function Clone

    } // end class SHA3_224

    public class Keccak_256 : SHA3
    {
        public Keccak_256() :
            base((Int32)HashSizeEnum.HashSize256)
        {
            hash_mode = HashMode.hmKeccak;
        } // end constructor

        override public IHash Clone()
        {
            Keccak_256 HashInstance = new Keccak_256();
            HashInstance.buffer = buffer.Clone();
            HashInstance.processed_bytes = processed_bytes;

            HashInstance.state = new UInt64[state.Length];
            for (Int32 i = 0; i < state.Length; i++)
                HashInstance.state[i] = state[i];

            HashInstance.BufferSize = BufferSize;

            return HashInstance;
        } // end function Clone

    } // end class Keccak_256

    public class Keccak_288 : SHA3
    {
        public Keccak_288() :
            base((Int32)HashSizeEnum.HashSize288)
        {
            hash_mode = HashMode.hmKeccak;
        } // end constructor

        override public IHash Clone()
        {
            Keccak_288 HashInstance = new Keccak_288();
            HashInstance.buffer = buffer.Clone();
            HashInstance.processed_bytes = processed_bytes;

            HashInstance.state = new UInt64[state.Length];
            for (Int32 i = 0; i < state.Length; i++)
                HashInstance.state[i] = state[i];

            HashInstance.BufferSize = BufferSize;

            return HashInstance;
        } // end function Clone

    } // end class Keccak_288

    public class Keccak_384 : SHA3
    {
        public Keccak_384() :
            base((Int32)HashSizeEnum.HashSize384)
        {
            hash_mode = HashMode.hmKeccak;
        } // end constructor

        override public IHash Clone()
        {
            Keccak_384 HashInstance = new Keccak_384();
            HashInstance.buffer = buffer.Clone();
            HashInstance.processed_bytes = processed_bytes;

            HashInstance.state = new UInt64[state.Length];
            for (Int32 i = 0; i < state.Length; i++)
                HashInstance.state[i] = state[i];

            HashInstance.BufferSize = BufferSize;

            return HashInstance;
        } // end function Clone

    } // end class Keccak_384

    public class Keccak_512 : SHA3
    {
        public Keccak_512() :
            base((Int32)HashSizeEnum.HashSize512)
        {
            hash_mode = HashMode.hmKeccak;
        } // end constructor

        override public IHash Clone()
        {
            Keccak_512 HashInstance = new Keccak_512();
            HashInstance.buffer = buffer.Clone();
            HashInstance.processed_bytes = processed_bytes;

            HashInstance.state = new UInt64[state.Length];
            for (Int32 i = 0; i < state.Length; i++)
                HashInstance.state[i] = state[i];

            HashInstance.BufferSize = BufferSize;

            return HashInstance;
        } // end function Clone

    } // end class Keccak_512

}
